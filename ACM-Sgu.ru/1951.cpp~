#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
const int maxn=51*100*100;
int e[maxn] , d[maxn] , mark[maxn] , p[maxn] , ans[maxn];
vector <int> c[maxn];
void DFS(int x)
{
	mark[x]=1;
	for(int i=0;i<c[x].size();i++)
		if(mark[c[x][i]]==0)
			DFS(c[x][i]);
	if(x!=1 and c[x].size()!=1 or x==1)
	{
		for(int i=0;i<c[x].size();i++)
			d[x]+=e[c[x][i]];
		d[x]++;
	}
	int l=0 , y=0;
	for(int j=0;j<c[x].size();j++)
		y+=e[c[x][j]];
	for(int i=0;i<c[x].size();i++)
	{
		int g=y;
		g-=e[c[x][i]];
		g+=d[c[x][i]];
		if(g>l)
		{
			l=max(l,g);
			p[x]=c[x][i];
		}
		e[x]=l;
	}
}
void PBP(int x , int y , int &tedad)
{
	mark[x]=0;
	if(y==1)
	{
		ans[tedad]=x;
		tedad++;
		for(int i=0;i<c[x].size();i++)
			if(mark[c[x][i]])
				PBP(c[x][i],0,tedad);
	}
	else
	{
		for(int i=0;i<c[x].size();i++)
			if(mark[c[x][i]])
				if(c[x][i]==p[x])
					PBP(c[x][i],1,tedad);
				else
					PBP(c[x][i],0,tedad);
	}
}
int main()
{
	int n;
	cin >> n;
	for(int i=2;i<=n;i++)
	{
		int m;
		cin >> m;
		c[m].push_back(i);
		c[i].push_back(m);
	}
	for(int i=2;i<=n;i++)
		if(c[i].size()==1)
			d[i]=1;
	int f=0;
	DFS(1,c);
	PBP(1,0,f);
	sort(ans,ans+f);
	cout << e[1]*1000 << endl;
	for(int i=0;i<f;i++)
		cout << ans[i] << " ";
}
